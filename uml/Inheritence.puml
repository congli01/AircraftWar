@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(FlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

AbstractFlyingObject <|-- AbstractAircraft
abstract class AbstractAircraft
{
	# axHp:int
    # hp:int
    # shootStrategy:ShootStrategy

    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp):void
    + decreaseHp(int decrease):void
    + getHp():int
    + getMaxHp():int
    + {abstract} shoot():List<BaseBullet>
    + setShootStrategy(ShootStrategy shootStrategy):void
 }

AbstractAircraft <|-- HeroAircraft
class HeroAircraft {
    -{static} heroAircraft:HeroAircraft
    - shootNum:int
    - power:int
    - direction:int

    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp, ShootStrategy shootStrategy):void
    +{static} getHeroAircraft():HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- BaseEnemy
class BaseEnemy {
    + BaseEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
    + {abstract} createProp():BaseProp
    + bombReact():void
    + unSubed():boolean
}

BaseEnemy <|-- CommonEnemy
class CommonEnemy {
    + CommonEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
}

BaseEnemy <|-- EliteEnemy
class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int

    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, ShootStrategy shootStrategy):void
    + shoot():List<BaseBullet>
    + createProp():BaseProp
}

BaseEnemy <|-- Boss
class Boss {
    - shootNum:int
    - power:int
    - direction:int

    + Boss(int locationX, int locationY, int speedX, int speedY, int hp, ShootStrategy shootStrategy)
    + shoot():List<Bullet>
    + bombReact():void
}

AbstractFlyingObject <|-- BaseBullet
class BaseBullet
{
    - power:int

    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power):void
    + forward():void
	+ getPower():int
	+ unSubed():boolean
}

BaseBullet <|-- HeroBullet
class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- EnemyBullet
class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
    + bombReact():void
}

AbstractFlyingObject <|-- BaseProp
abstract class BaseProp {
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
}

BaseProp <|-- BloodProp
class BloodProp {
    ~ heroAircraft:HeroAircraft

    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + func():void
}

BaseProp <|-- BombProp
class BombProp {
    - bombReactors:List<BombReactor>

    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + addReactor(List<BombReactor> reactors):void
    + removeReactor():void
    + func():void
}

BaseProp <|-- BulletProp
class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + func():void
}


@enduml